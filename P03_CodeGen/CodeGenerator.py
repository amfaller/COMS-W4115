###############################################################################
# CodeGenerator.py
#
# Accepts the AST generated by the parser and generates XML code.
###############################################################################

class Generator:
    def printXml(self):
        print("XML code:")
        print("---------")
        with open("output.xml", "r") as file:
            print(file.read())

    def generateCode(self, rootOfAst):
        # Create an XML file
        xmlFile = open("output.xml", "w")

        xmlDisclaimer = "<!-- This is an automatically generated XML file. DO NOT EDIT! -->"
        xmlFile.write(xmlDisclaimer + "\n\n")

        # For each node of the AST, generate the corresponding XML code.
        for node in rootOfAst.children:
            xmlBlock = self.processLine(node)
            xmlFile.write(xmlBlock)

        xmlFile.close()

    def processLine(self, node):
        # Process a line of the AST
        typeString = ""

        if node.type == "INT_LINE":
            typeString = "int"
        elif node.type == "FLOAT_LINE":
            typeString = "float"
        elif node.type == "BOOL_LINE":
            typeString = "bool"
        elif node.type == "STRING_LINE":
            typeString = "string"

        idString = node.children[1].children[0].value
        commentString = node.children[1].children[1].value
        value = node.children[2].value

        # The "Section" is everything in the ID before the .
        section = idString.split(".")[0]

        # The "ID" is everything in the ID after the .
        idString = idString.split(".")[1]

        # Remove the {} from the comment string
        commentString = commentString[1:-1]

        sectionStartLine = f"<{section}>"
        commentXmlLine = f"\t<!-- {commentString} -->"
        valueXmlLine = f"\t<{idString} type='{typeString}'>{value}</{idString}>"
        sectionEndLine = f"</{section}>"

        return f"{sectionStartLine}\n{commentXmlLine}\n{valueXmlLine}\n{sectionEndLine}\n\n"
